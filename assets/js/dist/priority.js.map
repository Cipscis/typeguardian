{"version":3,"file":"priority.js","mappings":"mBACO,MCIMA,EACF,mBADEA,EAQc,6CARdA,EASC,gCCWd,SAASC,EAAuBC,EAA8BC,GAC7D,MAAMC,EAA0BD,EAAUE,cAAcL,GACpDI,aAAmCE,mBACtCF,EAAwBG,QAAUL,EAAQM,wBAG3C,MAAMC,EAAeN,EAAUE,cAAcL,GACzCS,aAAwBC,oBAC3BD,EAAaE,MAAQT,EAAQU,YAE/B,CChCO,MAMMC,ECwBN,SACNC,GAEA,MAAMC,EAASC,OAAOD,ODjCI,CAC1BE,KAAM,KACNC,UAAW,KACXC,WAAY,SCgCZ,OAAO,SAAuBR,GAC7B,OAAQI,EAA0BK,SAAST,EAC5C,CACD,CDhC6BU,GEH7BC,SAASC,KAAKC,UAAUC,OAAO,QAAS,kBCCjC,WACN,MAAMC,EAAcC,aAAaC,QNPR,WMQzB,GAAKF,EAIL,IACC,MAAMxB,EAAU2B,KAAKC,MAAMJ,GAC3B,ICJK,SAA+BK,GACrC,MAAMC,EAAOD,EAEb,MACiB,iBAATC,GACE,OAATA,GAK4C,kBAAhCA,EAAKxB,0BAIZK,EAAcmB,EAAKpB,YAK1B,CDfOqB,CAAsB/B,GACvB,QJVC,SAAoBA,EAA8BC,GACxD,IAAKA,EAAW,CACf,MAAM+B,EAAmBZ,SAASjB,cAAcL,GAChD,IAAKkC,EACJ,MAAM,IAAIC,MAAM,wCAGjBhC,EAAY+B,C,CAGT/B,aAAqBiC,UACxBjC,EAAY,CAACA,IAGd,IAAK,MAAMkC,KAAOlC,EACjBF,EAAuBC,EAASmC,EAElC,CIJEC,CAAWpC,E,CACV,MAAOqC,GAER,M,CAEF,CDhBAC,E","sources":["webpack://typeguardian/./app/assets/js/src/ui/options/OptionsKey.ts","webpack://typeguardian/./app/assets/js/src/ui/Selector.ts","webpack://typeguardian/./app/assets/js/src/ui/options/setOptions.ts","webpack://typeguardian/./app/assets/js/src/ui/options/Indentation.ts","webpack://typeguardian/./app/assets/js/src/util/isEnum.ts","webpack://typeguardian/./app/assets/js/src/priority.ts","webpack://typeguardian/./app/assets/js/src/ui/options/applyPersistedOptions.ts","webpack://typeguardian/./app/assets/js/src/ui/options/TypeGuardianOptions.ts"],"sourcesContent":["/** The key used to persist options in `localStorage`. */\r\nexport const OptionsKey = 'options';\r\n","import { EnumTypeOf } from '../util/EnumTypeOf.js';\r\n\r\n/**\r\n * Selectors used to interface with the DOM.\r\n */\r\nexport const Selector = {\r\n\tINSTANCE: '.js-typeguardian',\r\n\tINPUT: '.js-typeguardian__input',\r\n\tOUTPUT: '.js-typeguardian__output',\r\n\r\n\tGENERATE: '.js-typeguardian__generate',\r\n\tCOPY: '.js-typeguardian__copy',\r\n\r\n\tALLOW_ENHANCED_DEBUGGING: '.js-typeguardian__allow-enhanced-debugging',\r\n\tINDENTATION: '.js-typeguardian__indentation',\r\n\r\n\tTOAST: '.js-toast',\r\n} as const;\r\nexport type Selector = EnumTypeOf<typeof Selector>;\r\n","import { Selector } from '../Selector.js';\r\nimport { TypeGuardianOptions } from './TypeGuardianOptions.js';\r\n\r\n/**\r\n * Apply a given set of options to the UI.\r\n */\r\nexport function setOptions(options: TypeGuardianOptions, $instance?: Element | Iterable<Element>): void {\r\n\tif (!$instance) {\r\n\t\tconst $fetchedInstance = document.querySelector(Selector.INSTANCE);\r\n\t\tif (!$fetchedInstance) {\r\n\t\t\tthrow new Error('Could not apply options: no UI found');\r\n\t\t}\r\n\r\n\t\t$instance = $fetchedInstance;\r\n\t}\r\n\r\n\tif ($instance instanceof Element) {\r\n\t\t$instance = [$instance];\r\n\t}\r\n\r\n\tfor (const $el of $instance) {\r\n\t\tapplyOptionsToInstance(options, $el);\r\n\t}\r\n}\r\n\r\nfunction applyOptionsToInstance(options: TypeGuardianOptions, $instance: Element): void {\r\n\tconst $allowEnhancedDebugging = $instance.querySelector(Selector.ALLOW_ENHANCED_DEBUGGING);\r\n\tif ($allowEnhancedDebugging instanceof HTMLInputElement) {\r\n\t\t$allowEnhancedDebugging.checked = options.allowEnhancedDebugging;\r\n\t}\r\n\r\n\tconst $indentation = $instance.querySelector(Selector.INDENTATION);\r\n\tif ($indentation instanceof HTMLSelectElement) {\r\n\t\t$indentation.value = options.indentation;\r\n\t}\r\n}\r\n","import { EnumTypeOf } from '../../util/EnumTypeOf.js';\r\nimport { isEnum } from '../../util/isEnum.js';\r\n\r\nexport const Indentation = {\r\n\tTABS: '\\t',\r\n\tSPACE_TWO: '  ',\r\n\tSPACE_FOUR: '    ',\r\n} as const;\r\nexport type Indentation = EnumTypeOf<typeof Indentation>;\r\nexport const isIndentation = isEnum(Indentation);\r\n","/**\r\n * A utility function for creating custom typeguards for enums.\r\n *\r\n * Works with enums created using TypeScript's `enum` keyword, and\r\n * with enums created using JavaScript objects.\r\n *\r\n * If using the `enum` keyword to create a numeric enum, be aware that\r\n * TypeScript creates reverse lookups in these enums, which means it\r\n * will include your key strings as values of the enum.\r\n *\r\n * {@link https://www.typescriptlang.org/play?#code/KYOwrgtgBAsgngUXNA3gKCpqBpBBNKAXigEYAaDLAZQQGEB5AOQBEB9XA4gJgoF800AekFQ8AezBQIASwDmACwAuUYAA8ADsADGyxfOkBnKIrFQARsCgADANrkoXALpW0WsSAPLQkAGoBDABswYCNiejMAK21FADoAN0DggwAKeCRIAEoAbgFhKAAhMGVpRQByIz8dMECAuGsbUo5SsihSmgYWdnxm0hanFzcPMQDgGICxWWTvCH8gkOzckQAVfSNDc20-MANgFoAzMQAnKE9D6RBZFWQjA00taT3pLRq4FqW4TSotM-VlQINTDtFEYwOooIdgHFgIcdlBxmIANaggwxITLVZQADuEgCABM4cBlHAJFBcaY9OdZEYAtIEZZxrJZJSoBJlFY0sgbNNZsEAGKHMQQXlgEA6aTuACCh1kkFAimcxjEaKgskJUD8ICukCgCTm5SgdLqfgqJ0UZwuLTMRSgJQJflxRgpjox6hKexq6qMmOAAQCqOVAFUDMzTszphU4mJpA7jC63TUYlAqKYySEoNtmQApPwJL4-ZRiSLRNYeRTAe0svaxyxWaZWA3AODYw641FAA An explanation of this pitfall}\r\n *\r\n * @example\r\n * ```typescript\r\n * const MyEnum = {\r\n *     KEY: 'value',\r\n *     SECOND_KEY: 'other value',\r\n * } as const;\r\n * type MyEnum = EnumTypeOf<typeof MyEnum>;\r\n *\r\n * const isMyEnum = isEnum(MyEnum);\r\n *\r\n * // It can be used to check if a value exists in your enum\r\n * isMyEnum(MyEnum.KEY); // true\r\n * isMyEnum('another value'); // false\r\n *\r\n * // It can also be used for type narrowing\r\n * const myString: string = MyEnum.KEY; // typed as `string`\r\n * if (isMyEnum(myString)) {\r\n *     myString; // typed as `MyEnum`\r\n * }\r\n * ```\r\n */\r\nexport function isEnum<E>(\r\n\tenumToCheck: Record<string, E>\r\n): (value: unknown) => value is E {\r\n\tconst values = Object.values(enumToCheck);\r\n\r\n\treturn function isEnumToCheck(value: unknown): value is E {\r\n\t\treturn (values as Array<unknown>).includes(value);\r\n\t};\r\n}\r\n","// The contents of this script run while the page is loading.\r\n// Therefore it should be kept as short and quick as possible, and only\r\n// script that is necessary to adjust the page as it loads should appear here.\r\n\r\nimport { applyPersistedOptions } from './ui/options/applyPersistedOptions.js';\r\n\r\ndocument.body.classList.remove('no-js', 'no-transitions');\r\n\r\napplyPersistedOptions();\r\n","import { OptionsKey } from './OptionsKey.js';\r\nimport { setOptions } from './setOptions.js';\r\nimport { isTypeGuardianOptions } from './TypeGuardianOptions.js';\r\n\r\n/**\r\n * If options have been persisted in `localStorage`, apply them to the UI.\r\n */\r\nexport function applyPersistedOptions(): void {\r\n\tconst optionsJSON = localStorage.getItem(OptionsKey);\r\n\tif (!optionsJSON) {\r\n\t\treturn;\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst options = JSON.parse(optionsJSON) as unknown;\r\n\t\tif (!isTypeGuardianOptions(options)) {\r\n\t\t    return;\r\n\t\t}\r\n\r\n\t\tsetOptions(options);\r\n\t} catch (e) {\r\n\t\t// Just give up silently\r\n\t\treturn;\r\n\t}\r\n}\r\n","import { Indentation, isIndentation } from './Indentation.js';\r\n\r\nexport interface TypeGuardianOptions {\r\n\tallowEnhancedDebugging: boolean;\r\n\tindentation: Indentation;\r\n}\r\n/**\r\n * Typeguard function for {@linkcode TypeGuardianOptions}\r\n *\r\n * Generated with {@link https://cipscis.github.io/typeguardian TypeGuardian} v1.1.0\r\n */\r\nexport function isTypeGuardianOptions(testData: unknown): testData is TypeGuardianOptions {\r\n\tconst data = testData as TypeGuardianOptions;\r\n\r\n\tif (!(\r\n\t\ttypeof data === 'object' &&\r\n\t\tdata !== null\r\n\t)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (!(typeof data.allowEnhancedDebugging === 'boolean')) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (!(isIndentation(data.indentation))) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n"],"names":["Selector","applyOptionsToInstance","options","$instance","$allowEnhancedDebugging","querySelector","HTMLInputElement","checked","allowEnhancedDebugging","$indentation","HTMLSelectElement","value","indentation","isIndentation","enumToCheck","values","Object","TABS","SPACE_TWO","SPACE_FOUR","includes","isEnum","document","body","classList","remove","optionsJSON","localStorage","getItem","JSON","parse","testData","data","isTypeGuardianOptions","$fetchedInstance","Error","Element","$el","setOptions","e","applyPersistedOptions"],"sourceRoot":""}