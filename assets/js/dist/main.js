(()=>{"use strict";const t={INSTANCE:".js-typeguardian",INPUT:".js-typeguardian__input",OUTPUT:".js-typeguardian__output",GENERATE:".js-typeguardian__generate",COPY:".js-typeguardian__copy",TOAST:".js-toast"};async function n(){const n=this.closest(t.INSTANCE);if(!n)return;const e=n.querySelector(t.OUTPUT);if(!(e instanceof HTMLTextAreaElement))return;const r=e.value;await navigator.clipboard.writeText(r),function(n){const e=document.querySelector(t.TOAST);e&&(e.innerHTML="Copied!",e.hidden=!1,e.animate([{opacity:"0"},{opacity:"1",offset:.2},{opacity:"1",offset:.8},{opacity:"0"}],5e3).addEventListener("finish",(t=>{e.hidden=!0,e.innerHTML=""})))}()}const e={ERROR:"has-error"};function r(t){return`is${t}`}function o(t,n,e="    ",a=0){const i=function(t="    ",n=0){const e=new Array(n);return e.fill(t),e.join("")}(e,a),s=/^([A-Z][a-z]+)+$/;if(["boolean","number","string","undefined"].includes(n))return`typeof data.${t} === '${n}'`;if("null"===n)return`data.${t} === null`;const c=n.match(/^(Array<(.+?)>|(.+?)\[\])$/);if(c){const n=c[2]??c[3];return`\n${i}${e}Array.isArray(data.${t}) &&\n${i}${e}data.${t}.every(${n.match(s)?r(n):`() => ${o(t,n,e,a+1)}`})\n${i}`}const u=n.split(/\s*\|\s*/),l=[...new Set(u)];return u.length!==l.length&&console.warn(`WARNING: Duplicate union member detected in type ${n}`),u.length>1?`\n${i}${e}${u.map((n=>o(t,n,e,a+1))).join(` ||\n${i}${e}`)}\n${i}`:s.test(n)?`${r(n)}(data.${t})`:`false /* TODO: implement typeguard for \`${t}: ${n}\`*/`}const a="1.0.0";function i(t,n="    "){const e="string"==typeof t?function(t){const n=/^\/\//,e=/^\/?\*/,r=t.split("\n").map((t=>t.trim())).filter((t=>""!==t&&!n.test(t)&&!e.test(t)));if(0===r.length)throw new Error("Couldn't read empty type definition");const o=r[0].match(/^(export\s+)?(type|interface)\s+(\w+)\s*=\s*{(\s*\/\/.*)?$/);if(!o)throw new Error("Couldn't determine name of custom type");const a=o[3],i=r.slice(1,-1).map(((t,r)=>{if(n.test(t))return;if(e.test(t))return;const o=t.match(/^(\w+)\s*(\??:)\s*(.+?)(,|;)?(\s*\/\/.*)?$/);if(!o)throw new Error(`Couldn't read property on line ${r} of ${a} definition: ${t}`);const i=o[1],s="?:"===o[2];return[i,`${o[3]}${s?" | undefined":""}`]})).filter((t=>Boolean(t)));return{name:a,props:i}}(t):t,{name:r,props:i}=e;return`/**\n * Typeguard function for {@linkcode ${r}}\n *\n * Generated with {@link TypeGuardian https://cipscis.github.io/typeguardian} v${a}\n */\nfunction is${r}(testData: unknown): testData is ${r} {\n${n}const data = testData as ${r};\n\n${n}if (!(\n${n}${n}typeof data === 'object' &&\n${n}${n}data !== null\n${n})) {\n${n}${n}return false;\n${n}}\n\n${n}${i.map((([t,e])=>`if (!(${o(t,e,n,1)})) {\n${n}${n}return false;\n${n}}`)).join(`\n\n${n}`)}\n\n${n}return true;\n}`}function s(){const n=this.closest(t.INSTANCE);if(!n)return;const r=n.querySelector(t.INPUT);if(!(r instanceof HTMLTextAreaElement))return;const o=n.querySelector(t.OUTPUT);if(!(o instanceof HTMLTextAreaElement))return;const a=r.value;try{const t=i(a);o.value=t,o.classList.remove(e.ERROR)}catch(t){const n=t instanceof Error?t.message:String(t);o.value=n,o.classList.add(e.ERROR)}}document.querySelectorAll(t.GENERATE).forEach((t=>t.addEventListener("click",s))),document.addEventListener("keydown",(r=>{const o=document.querySelector(t.INPUT);if(!o)return;const a=document.querySelector(t.OUTPUT);a&&"Enter"===r.key&&(r.ctrlKey||r.metaKey)&&(s.call(o),a.classList.contains(e.ERROR)||n.call(o))})),document.querySelectorAll(t.COPY).forEach((t=>t.addEventListener("click",n)))})();
//# sourceMappingURL=main.js.map