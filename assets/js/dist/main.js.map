{"version":3,"file":"main.js","mappings":"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","sources":["webpack://typeguardian/./app/assets/js/src/ui/Selector.ts","webpack://typeguardian/./app/assets/js/src/ui/CssClass.ts","webpack://typeguardian/./app/assets/js/src/ui/toast.ts","webpack://typeguardian/./app/assets/js/src/ui/actions/copy.ts","webpack://typeguardian/./app/assets/js/src/typeguardian/readTypeDef.ts","webpack://typeguardian/./app/assets/js/src/typeguardian/writeTypeguardName.ts","webpack://typeguardian/./app/assets/js/src/typeguardian/writeTypeguardExpression.ts","webpack://typeguardian/./app/assets/js/src/typeguardian/writeIndentation.ts","webpack://typeguardian/./app/assets/js/src/typeguardian/version.ts","webpack://typeguardian/./app/assets/js/src/typeguardian/writeTypeAssertionName.ts","webpack://typeguardian/./app/assets/js/src/ui/options/Indentation.ts","webpack://typeguardian/./app/assets/js/src/util/isEnum.ts","webpack://typeguardian/./app/assets/js/src/ui/options/getOptions.ts","webpack://typeguardian/./app/assets/js/src/ui/actions/generate.ts","webpack://typeguardian/./app/assets/js/src/typeguardian/writeTypeAssertionFunction.ts","webpack://typeguardian/./app/assets/js/src/typeguardian/writeTypeguardFunction.ts","webpack://typeguardian/./app/assets/js/src/ui/options/persistOptions.ts","webpack://typeguardian/./app/assets/js/src/ui/options/OptionsKey.ts","webpack://typeguardian/./app/assets/js/src/ui/index.ts"],"sourcesContent":["import { EnumTypeOf } from '../util/EnumTypeOf.js';\r\n\r\n/**\r\n * Selectors used to interface with the DOM.\r\n */\r\nexport const Selector = {\r\n\tINSTANCE: '.js-typeguardian',\r\n\tINPUT: '.js-typeguardian__input',\r\n\tOUTPUT: '.js-typeguardian__output',\r\n\r\n\tGENERATE: '.js-typeguardian__generate',\r\n\tCOPY: '.js-typeguardian__copy',\r\n\r\n\tALLOW_ENHANCED_DEBUGGING: '.js-typeguardian__allow-enhanced-debugging',\r\n\tINDENTATION: '.js-typeguardian__indentation',\r\n\r\n\tTOAST: '.js-toast',\r\n} as const;\r\nexport type Selector = EnumTypeOf<typeof Selector>;\r\n","import { EnumTypeOf } from '../util/EnumTypeOf.js';\r\n\r\n/**\r\n * CSS classes that are manipulated with JavaScript\r\n */\r\nexport const CssClass = {\r\n\tERROR: 'has-error',\r\n\r\n\tTOAST_CONTAINER: 'toast__container',\r\n\tTOAST: 'toast',\r\n} as const;\r\nexport type CssClass = EnumTypeOf<typeof CssClass>;\r\n","import { CssClass } from './CssClass.js';\r\n\r\ninterface ToastOptions {\r\n\tduration: number,\r\n}\r\n\r\nconst defaults: ToastOptions = {\r\n\tduration: 6000,\r\n};\r\n\r\nconst $toastContainer = document.createElement('div');\r\n$toastContainer.classList.add(CssClass.TOAST_CONTAINER);\r\n$toastContainer.setAttribute('aria-live', 'polite');\r\n\r\ndocument.body.append($toastContainer);\r\n\r\nexport function toast(message: string, opts?: Partial<ToastOptions>): void {\r\n\tconst options: ToastOptions = {\r\n\t\t...defaults,\r\n\t\t...opts,\r\n\t};\r\n\r\n\tconst $toast = createToast();\r\n\t$toast.innerText = message;\r\n\r\n\tconst keyFrom: Keyframe = {\r\n\t\topacity: 0,\r\n\t};\r\n\tif (matchMedia('(prefers-reduced-motion: no-preference)').matches) {\r\n\t\tkeyFrom.transform = 'translateY(100%)';\r\n\t}\r\n\r\n\t$toastContainer.append($toast);\r\n\t$toast.animate([keyFrom, {}], {\r\n\t\tduration: 300,\r\n\t\tfill: 'backwards',\r\n\t});\r\n\r\n\tqueueDestroyToast($toast, options.duration);\r\n}\r\n\r\nfunction createToast(): HTMLDivElement {\r\n\tconst $toast = document.createElement('div');\r\n\t$toast.classList.add(CssClass.TOAST);\r\n\r\n\treturn $toast;\r\n}\r\n\r\nfunction queueDestroyToast($toast: HTMLElement, duration: number): Promise<void> {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\twindow.setTimeout(() => {\r\n\t\t\tconst keyTo: Keyframe = {\r\n\t\t\t\topacity: 0,\r\n\t\t\t};\r\n\t\t\tif (matchMedia('(prefers-reduced-motion: reduce)').matches === false) {\r\n\t\t\t\tkeyTo.transform = 'translateY(-100%)';\r\n\t\t\t}\r\n\r\n\t\t\tconst animation = $toast.animate([{}, keyTo], {\r\n\t\t\t\tduration: 300,\r\n\t\t\t\tfill: 'forwards',\r\n\t\t\t});\r\n\r\n\t\t\tanimation.addEventListener('finish', () => {\r\n\t\t\t\t$toast.remove();\r\n\t\t\t\tresolve();\r\n\t\t\t});\r\n\t\t\t// TODO: Handle what happens if animations are prevented\r\n\t\t}, duration);\r\n\t});\r\n}\r\n","import { Selector } from '../Selector.js';\r\nimport { toast } from '../toast.js';\r\n\r\n/**\r\n * Copy the current output from a TypeGuardian instance to the clipboard.\r\n */\r\nexport async function copy(this: HTMLElement): Promise<void> {\r\n\tconst $button = this;\r\n\tconst $instance = $button.closest(Selector.INSTANCE);\r\n\tif (!$instance) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst $output = $instance.querySelector(Selector.OUTPUT);\r\n\tif (!($output instanceof HTMLTextAreaElement)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst output = $output.value;\r\n\tawait navigator.clipboard.writeText(output);\r\n\r\n\ttoast('Copied!');\r\n}\r\n","import { TypeDef } from './TypeDef.js';\r\n\r\n/**\r\n * Read in a type definition, and convert it to a `TypeDef` that can be used in code.\r\n *\r\n * It assumes all type or interface definitions will meet these criteria:\r\n *\r\n * - The type's name is on the first line\r\n * - The following lines each describe one property each\r\n * - The last line is a closing brace and can be ignored\r\n */\r\nexport function readTypeDef(typedef: string): TypeDef {\r\n\tconst lineCommentPattern = /^\\/\\//;\r\n\tconst blockCommentPattern = /^\\/?\\*/;\r\n\r\n\tconst lines = typedef.split('\\n')\r\n\t\t.map((line) => line.trim())\r\n\t\t.filter((line) => {\r\n\t\t\tconst isEmpty = line === '';\r\n\t\t\tif (isEmpty) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tconst isLineComment = lineCommentPattern.test(line);\r\n\t\t\tif (isLineComment) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tconst isInBlockComment = blockCommentPattern.test(line);\r\n\t\t\tif (isInBlockComment) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\tif (lines.length === 0) {\r\n\t\tthrow new Error(`Couldn't read empty type definition`);\r\n\t}\r\n\r\n\tconst nameMatch = lines[0].match(/^(export\\s+)?(type|interface)\\s+(\\w+)( extends (\\w+))?\\s*=?\\s*{(\\s*\\/\\/.*)?$/);\r\n\tif (!nameMatch) {\r\n\t\tthrow new Error(`Couldn't determine name of custom type`);\r\n\t}\r\n\tconst exported = Boolean(nameMatch[1]);\r\n\tconst name = nameMatch[3];\r\n\tconst extendedInterface = nameMatch[5];\r\n\r\n\t// Ignore first and last line\r\n\tconst propLines = lines.slice(1, -1);\r\n\tconst props = propLines.map((line, lineNumber) => {\r\n\t\tconst isLineComment = (lineCommentPattern).test(line);\r\n\t\tif (isLineComment) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// This is not a proper test, just assuming block comments will use JSDoc style\r\n\t\tconst isInBlockComment = (blockCommentPattern).test(line);\r\n\t\tif (isInBlockComment) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst lineMatch = line.match(/^(\\w+)\\s*(\\??:)\\s*(.+?)(,|;)?(\\s*\\/\\/.*)?$/);\r\n\r\n\t\tif (!lineMatch) {\r\n\t\t\tthrow new Error(`Couldn't read property on line ${lineNumber} of ${name} definition: ${line}`);\r\n\t\t}\r\n\r\n\t\tconst propName = lineMatch[1];\r\n\t\tconst isOptional = lineMatch[2] === '?:';\r\n\t\tconst propType = `${lineMatch[3]}${isOptional ? ' | undefined' : ''}`;\r\n\r\n\t\treturn [propName, propType] as [string, string];\r\n\t}).filter((el): el is NonNullable<typeof el> => Boolean(el));\r\n\r\n\tconst typeDef: TypeDef = {\r\n\t\tname,\r\n\t\tprops,\r\n\t\texported,\r\n\t};\r\n\r\n\tif (extendedInterface) {\r\n\t\ttypeDef.extendedInterface = extendedInterface;\r\n\t}\r\n\r\n\treturn typeDef;\r\n}\r\n","/**\r\n * Write the name of a custom type's typeguard function in a systematic way.\r\n *\r\n * For example, the type `CustomType` would have a typeguard function `isCustomType`.\r\n */\r\nexport function writeTypeguardName(typeName: string): string {\r\n\treturn `is${typeName}`;\r\n}\r\n","import { writeIndentation } from './writeIndentation.js';\r\nimport { writeTypeguardName } from './writeTypeguardName.js';\r\n\r\ninterface WriteTypeguardExpressionOptions {\r\n\tindent: string;\r\n\tindentLevel: number;\r\n\tpassErrorLogger?: boolean;\r\n\r\n\t/**\r\n\t * By default, we assume we are checking a property on an object called `data`.\r\n\t *\r\n\t * If `isValue` is `true`, that means we are checking a property directly, without accessing it on `data`.\r\n\t */\r\n\tisValue?: boolean;\r\n}\r\n\r\n/**\r\n * Write a typeguard expression for a single type, i.e. not an object with properties.\r\n */\r\nexport function writeTypeguardExpression(propName: string, propType: string, options: WriteTypeguardExpressionOptions): string {\r\n\tconst {\r\n\t\tindent,\r\n\t\tindentLevel,\r\n\t} = options;\r\n\tconst baseIndent = writeIndentation(indent, indentLevel);\r\n\r\n\t/** These primitives can be checked via the `typeof` operator */\r\n\tconst typeofPrimitives = ['boolean', 'number', 'string', 'undefined'];\r\n\r\n\tconst unionSplitPattern = /\\s*\\|\\s*/;\r\n\r\n\t/** Array types can be specified via `Array<Type>` or `Type[]` */\r\n\tconst arrayPattern = /^(Array<(.+?)>|(.+?)\\[\\])$/;\r\n\r\n\t/** Name convention: custom types use PascalCase */\r\n\tconst customTypePattern = /^([A-Z][a-z]+)+$/;\r\n\r\n\t// `typeof` checks\r\n\tif (typeofPrimitives.includes(propType)) {\r\n\t\treturn `typeof ${options.isValue ? '' : 'data.'}${propName} === '${propType}'`;\r\n\t}\r\n\r\n\t// `null` checks\r\n\tif (propType === 'null') {\r\n\t\treturn `${options.isValue ? '' : 'data.'}${propName} === null`;\r\n\t}\r\n\r\n\t// Array types\r\n\tconst arrayMatch = propType.match(arrayPattern);\r\n\tif (arrayMatch) {\r\n\t\tconst innerType = arrayMatch[2] ?? arrayMatch[3];\r\n\r\n\t\treturn `\r\n${baseIndent}${indent}Array.isArray(${options.isValue ? '' : 'data.'}${propName}) &&\r\n${baseIndent}${indent}${options.isValue ? '' : 'data.'}${propName}.every(${\r\n\tinnerType.match(customTypePattern)\r\n\t\t? options.passErrorLogger\r\n\t\t\t? `(el) => ${writeTypeguardName(innerType)}(el, errorLogger)`\r\n\t\t\t: writeTypeguardName(innerType)\r\n\t\t: `(el) => ${writeTypeguardExpression('el', innerType, {\r\n\t\t\tindent,\r\n\t\t\tindentLevel: indentLevel + 1,\r\n\t\t\tisValue: true,\r\n\t\t})}`\r\n})\r\n${baseIndent}`;\r\n\t}\r\n\r\n\t// Union types\r\n\t// TODO: Don't split on unions within an array type\r\n\tconst unionMembers = propType.split(unionSplitPattern);\r\n\r\n\tconst dedupedUnionMembers = [...new Set(unionMembers)];\r\n\tif (unionMembers.length !== dedupedUnionMembers.length) {\r\n\t\tconsole.warn(`WARNING: Duplicate union member detected in type ${propType}`);\r\n\t}\r\n\r\n\tif (unionMembers.length > 1) {\r\n\t\treturn `\r\n${baseIndent}${indent}${unionMembers.map((type) => writeTypeguardExpression(propName, type, {\r\n\tindent,\r\n\tindentLevel: indentLevel + 1,\r\n})).join(` ||\\n${baseIndent}${indent}`)}\r\n${baseIndent}`;\r\n\t}\r\n\r\n\t// Date\r\n\tconst isDate = propType === 'Date';\r\n\tif (isDate) {\r\n\t\treturn `data.${propName} instanceof Date`;\r\n\t}\r\n\r\n\t// Custom types\r\n\tconst isCustomType = (customTypePattern).test(propType);\r\n\tif (isCustomType) {\r\n\t\treturn `${writeTypeguardName(propType)}(data.${propName}${options.passErrorLogger ? ', errorLogger' : ''})`;\r\n\t}\r\n\r\n\t// Unrecognised pattern, left to developer to implement\r\n\treturn `false /* TODO: implement typeguard for \\`${propName}: ${propType}\\`*/`;\r\n}\r\n","/**\r\n * Write a certain level of defined indentation.\r\n */\r\nexport function writeIndentation(indent = '    ', level = 0): string {\r\n\tconst indentLevels = new Array(level);\r\n\tindentLevels.fill(indent);\r\n\r\n\treturn indentLevels.join('');\r\n}\r\n","// `__VERSION__` is replaced via `webpack.DefinePlugin`\r\ndeclare const __VERSION__: string;\r\n\r\nexport const version = __VERSION__;\r\n","/**\r\n * Write the name of a custom type's type assertion function in a systematic way.\r\n *\r\n * For example, the type `CustomType` would have a type assertion function `assertIsCustomType`.\r\n */\r\nexport function writeTypeAssertionName(typeName: string): string {\r\n\treturn `assertIs${typeName}`;\r\n}\r\n","import { EnumTypeOf } from '../../util/EnumTypeOf.js';\r\nimport { isEnum } from '../../util/isEnum.js';\r\n\r\nexport const Indentation = {\r\n\tTABS: '\\t',\r\n\tSPACE_TWO: '  ',\r\n\tSPACE_FOUR: '    ',\r\n} as const;\r\nexport type Indentation = EnumTypeOf<typeof Indentation>;\r\nexport const isIndentation = isEnum(Indentation);\r\n","/**\r\n * A utility function for creating custom typeguards for enums.\r\n *\r\n * Works with enums created using TypeScript's `enum` keyword, and\r\n * with enums created using JavaScript objects.\r\n *\r\n * If using the `enum` keyword to create a numeric enum, be aware that\r\n * TypeScript creates reverse lookups in these enums, which means it\r\n * will include your key strings as values of the enum.\r\n *\r\n * {@link https://www.typescriptlang.org/play?#code/KYOwrgtgBAsgngUXNA3gKCpqBpBBNKAXigEYAaDLAZQQGEB5AOQBEB9XA4gJgoF800AekFQ8AezBQIASwDmACwAuUYAA8ADsADGyxfOkBnKIrFQARsCgADANrkoXALpW0WsSAPLQkAGoBDABswYCNiejMAK21FADoAN0DggwAKeCRIAEoAbgFhKAAhMGVpRQByIz8dMECAuGsbUo5SsihSmgYWdnxm0hanFzcPMQDgGICxWWTvCH8gkOzckQAVfSNDc20-MANgFoAzMQAnKE9D6RBZFWQjA00taT3pLRq4FqW4TSotM-VlQINTDtFEYwOooIdgHFgIcdlBxmIANaggwxITLVZQADuEgCABM4cBlHAJFBcaY9OdZEYAtIEZZxrJZJSoBJlFY0sgbNNZsEAGKHMQQXlgEA6aTuACCh1kkFAimcxjEaKgskJUD8ICukCgCTm5SgdLqfgqJ0UZwuLTMRSgJQJflxRgpjox6hKexq6qMmOAAQCqOVAFUDMzTszphU4mJpA7jC63TUYlAqKYySEoNtmQApPwJL4-ZRiSLRNYeRTAe0svaxyxWaZWA3AODYw641FAA An explanation of this pitfall}\r\n *\r\n * @example\r\n * ```typescript\r\n * const MyEnum = {\r\n *     KEY: 'value',\r\n *     SECOND_KEY: 'other value',\r\n * } as const;\r\n * type MyEnum = EnumTypeOf<typeof MyEnum>;\r\n *\r\n * const isMyEnum = isEnum(MyEnum);\r\n *\r\n * // It can be used to check if a value exists in your enum\r\n * isMyEnum(MyEnum.KEY); // true\r\n * isMyEnum('another value'); // false\r\n *\r\n * // It can also be used for type narrowing\r\n * const myString: string = MyEnum.KEY; // typed as `string`\r\n * if (isMyEnum(myString)) {\r\n *     myString; // typed as `MyEnum`\r\n * }\r\n * ```\r\n */\r\nexport function isEnum<E>(\r\n\tenumToCheck: Record<string, E>\r\n): (value: unknown) => value is E {\r\n\tconst values = Object.values(enumToCheck);\r\n\r\n\treturn function isEnumToCheck(value: unknown): value is E {\r\n\t\treturn (values as Array<unknown>).includes(value);\r\n\t};\r\n}\r\n","import { Selector } from '../Selector.js';\r\nimport { isIndentation } from './Indentation.js';\r\nimport { TypeGuardianOptions } from './TypeGuardianOptions.js';\r\n\r\n/**\r\n * Retrieve the options from the UI.\r\n */\r\nexport function getOptions($instance: Element): TypeGuardianOptions | null {\r\n\tconst $allowEnhancedDebugging = $instance.querySelector(Selector.ALLOW_ENHANCED_DEBUGGING);\r\n\tif (!($allowEnhancedDebugging instanceof HTMLInputElement)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst allowEnhancedDebugging = $allowEnhancedDebugging.checked;\r\n\r\n\tconst $indentation = $instance.querySelector(Selector.INDENTATION);\r\n\tif (!($indentation instanceof HTMLSelectElement)) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst indentation = $indentation.value;\r\n\tif (!(isIndentation(indentation))) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\treturn {\r\n\t\tallowEnhancedDebugging,\r\n\t\tindentation,\r\n\t};\r\n}\r\n","import { writeTypeAssertionFunction } from '../../typeguardian/writeTypeAssertionFunction.js';\r\nimport { writeTypeguardFunction } from '../../typeguardian/writeTypeguardFunction.js';\r\nimport { CssClass } from '../CssClass.js';\r\nimport { getOptions } from '../options/getOptions.js';\r\nimport { Selector } from '../Selector.js';\r\n\r\n/**\r\n * Generate a typeguard function from input in the UI, and display it.\r\n */\r\nexport function generate(this: HTMLElement): void {\r\n\tconst $button = this;\r\n\tconst $instance = $button.closest(Selector.INSTANCE);\r\n\tif (!$instance) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst $input = $instance.querySelector(Selector.INPUT);\r\n\tif (!($input instanceof HTMLTextAreaElement)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst $output = $instance.querySelector(Selector.OUTPUT);\r\n\tif (!($output instanceof HTMLTextAreaElement)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst input = $input.value;\r\n\r\n\ttry {\r\n\t\tconst options = getOptions($instance);\r\n\r\n\t\tconst output = options?.allowEnhancedDebugging\r\n\t\t\t? writeTypeAssertionFunction(input, options?.indentation)\r\n\t\t\t: writeTypeguardFunction(input, options?.indentation);\r\n\r\n\t\t$output.value = output;\r\n\t\t$output.classList.remove(CssClass.ERROR);\r\n\t} catch (e) {\r\n\t\tconst message = e instanceof Error ? e.message : String(e);\r\n\r\n\t\t$output.value = message;\r\n\t\t$output.classList.add(CssClass.ERROR);\r\n\t}\r\n}\r\n","import { TypeDef } from './TypeDef.js';\r\nimport { readTypeDef } from './readTypeDef.js';\r\nimport { writeTypeguardExpression } from './writeTypeguardExpression.js';\r\nimport { version } from './version.js';\r\nimport { writeTypeAssertionName } from './writeTypeAssertionName.js';\r\nimport { writeTypeguardName } from './writeTypeguardName.js';\r\n\r\n/**\r\n * Write a typeguard function for an object type with properties.\r\n *\r\n * This function is intended to be used for generating code, not actually run within the browser.\r\n */\r\nexport function writeTypeAssertionFunction(typedef: TypeDef, indent?: string): string\r\nexport function writeTypeAssertionFunction(typedefString: string, indent?: string): string\r\nexport function writeTypeAssertionFunction(typedefArg: TypeDef | string, indent = '    '): string {\r\n\tconst typedef = typeof typedefArg === 'string' ? readTypeDef(typedefArg) : typedefArg;\r\n\r\n\tconst {\r\n\t\tname,\r\n\t\textendedInterface,\r\n\t\tprops,\r\n\t\texported,\r\n\t} = typedef;\r\n\r\n\tconst typeAssertion = `/**\r\n * Type assertion function for {@linkcode ${name}}\r\n *\r\n * Generated with {@link https://cipscis.github.io/typeguardian TypeGuardian} v${version}\r\n *\r\n * @param [errorLogger] A function that can log errors specifying exactly where nested typeguards failed\r\n */\r\nfunction ${writeTypeAssertionName(name)}(testData: unknown, errorLogger?: (message: string) => void): asserts testData is ${name} {\r\n${indent}const data = testData as ${name};\r\n\r\n${\r\n\textendedInterface\r\n\t? `${indent}if (!(${writeTypeguardName(extendedInterface)}(data))) {\r\n${indent}${indent}throw new TypeError('Tested value was not of type \\`${extendedInterface}\\`');\r\n${indent}}`\r\n\t: `${indent}if (!(\r\n${indent}${indent}typeof data === 'object' &&\r\n${indent}${indent}data !== null\r\n${indent})) {\r\n${indent}${indent}throw new TypeError('Tested value was not an object');\r\n${indent}}`\r\n}\r\n\r\n${indent}${props.map(([propName, propType]) => `if (!(${writeTypeguardExpression(propName, propType, {\r\n\tindent,\r\n\tindentLevel: 1,\r\n\tpassErrorLogger: true,\r\n})})) {\r\n${indent}${indent}throw new TypeError('\\`${name}\\` typeguard failed: Property \\`${propName}\\` was not of type \\`${propType}\\`');\r\n${indent}}`).join(`\\n\\n${indent}`)}\r\n}\r\n`;\r\n\r\n\tconst typeguard = `/**\r\n * Typeguard function for {@linkcode ${name}}\r\n *\r\n * Generated with {@link https://cipscis.github.io/typeguardian TypeGuardian} v${version}\r\n *\r\n * @param [errorLogger] A function that can log errors specifying exactly where the typeguard failed\r\n */\r\n${exported ? 'export ' : ''}function ${writeTypeguardName(name)}(testData: unknown, errorLogger?: (message: string) => void): testData is ${name} {\r\n${indent}try {\r\n${indent}${indent}${writeTypeAssertionName(name)}(testData, errorLogger);\r\n${indent}${indent}return true;\r\n${indent}} catch (e) {\r\n${indent}${indent}if (errorLogger) {\r\n${indent}${indent}${indent}errorLogger(e instanceof Error ? e.message : String(e));\r\n${indent}${indent}}\r\n${indent}${indent}return false;\r\n${indent}}\r\n}\r\n`;\r\n\r\n\treturn `${typeAssertion}\\n${typeguard}`;\r\n}\r\n","import { TypeDef } from './TypeDef.js';\r\nimport { readTypeDef } from './readTypeDef.js';\r\nimport { writeTypeguardExpression } from './writeTypeguardExpression.js';\r\nimport { version } from './version.js';\r\nimport { writeTypeguardName } from './writeTypeguardName.js';\r\n\r\n/**\r\n * Write a typeguard function for an object type with properties.\r\n *\r\n * This function is intended to be used for generating code, not actually run within the browser.\r\n */\r\nexport function writeTypeguardFunction(typeDef: TypeDef, indent?: string): string\r\nexport function writeTypeguardFunction(typeDefString: string, indent?: string): string\r\nexport function writeTypeguardFunction(typeDefArg: TypeDef | string, indent = '    '): string {\r\n\tconst typeDef = typeof typeDefArg === 'string' ? readTypeDef(typeDefArg) : typeDefArg;\r\n\r\n\tconst {\r\n\t\tname,\r\n\t\textendedInterface,\r\n\t\tprops,\r\n\t\texported,\r\n\t} = typeDef;\r\n\r\n\tconst typeguard = `/**\r\n * Typeguard function for {@linkcode ${name}}\r\n *\r\n * Generated with {@link https://cipscis.github.io/typeguardian TypeGuardian} v${version}\r\n */\r\n${exported ? 'export ' : ''}function ${writeTypeguardName(name)}(testData: unknown): testData is ${name} {\r\n${indent}const data = testData as ${name};\r\n\r\n${\r\n\textendedInterface\r\n\t? `${indent}if (!(${writeTypeguardName(extendedInterface)}(data))) {\r\n${indent}${indent}return false;\r\n${indent}}`\r\n\t: `${indent}if (!(\r\n${indent}${indent}typeof data === 'object' &&\r\n${indent}${indent}data !== null\r\n${indent})) {\r\n${indent}${indent}return false;\r\n${indent}}`\r\n}\r\n\r\n${indent}${props.map(([propName, propType]) => `if (!(${writeTypeguardExpression(propName, propType, {\r\n\tindent,\r\n\tindentLevel: 1,\r\n})})) {\r\n${indent}${indent}return false;\r\n${indent}}`).join(`\\n\\n${indent}`)}\r\n\r\n${indent}return true;\r\n}\r\n`;\r\n\r\n\treturn typeguard;\r\n}\r\n","import { Selector } from '../Selector.js';\r\nimport { getOptions } from './getOptions.js';\r\nimport { OptionsKey } from './OptionsKey.js';\r\n\r\n/**\r\n * Store the current options in `localStorage`.\r\n */\r\nexport function persistOptions(this: Element): void {\r\n\tconst $instance = this.closest(Selector.INSTANCE);\r\n\tif (!$instance) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst options = getOptions($instance);\r\n\r\n\tlocalStorage.setItem(OptionsKey, JSON.stringify(options));\r\n}\r\n","/** The key used to persist options in `localStorage`. */\r\nexport const OptionsKey = 'options';\r\n","import { copy } from './actions/copy.js';\r\nimport { CssClass } from './CssClass.js';\r\nimport { generate } from './actions/generate.js';\r\nimport { persistOptions } from './options/persistOptions.js';\r\nimport { Selector } from './Selector.js';\r\n\r\n/**\r\n * Initialise the TypeGuardian UI.\r\n */\r\nexport function init(): void {\r\n\tinitEvents();\r\n}\r\n\r\nfunction initEvents(): void {\r\n\t// Generate\r\n\tdocument.querySelectorAll<HTMLElement>(Selector.GENERATE).forEach((el) => el.addEventListener('click', generate));\r\n\tdocument.addEventListener('keydown', (e) => {\r\n\t\tconst $input = document.querySelector<HTMLElement>(Selector.INPUT);\r\n\t\tif (!$input) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst $output = document.querySelector<HTMLElement>(Selector.OUTPUT);\r\n\t\tif (!$output) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\r\n\t\t\tgenerate.call($input);\r\n\t\t\tif (!$output.classList.contains(CssClass.ERROR)) {\r\n\t\t\t\tcopy.call($input);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// Copy\r\n\tdocument.querySelectorAll<HTMLElement>(Selector.COPY).forEach((el) => el.addEventListener('click', copy));\r\n\r\n\t// Persist options\r\n\tdocument.querySelectorAll<HTMLElement>(Selector.ALLOW_ENHANCED_DEBUGGING).forEach((el) => el.addEventListener('change', persistOptions));\r\n\tdocument.querySelectorAll<HTMLElement>(Selector.INDENTATION).forEach((el) => el.addEventListener('change', persistOptions));\r\n}\r\n"],"names":["Selector","INSTANCE","INPUT","OUTPUT","GENERATE","COPY","ALLOW_ENHANCED_DEBUGGING","INDENTATION","TOAST","CssClass","ERROR","TOAST_CONTAINER","defaults","duration","$toastContainer","document","createElement","async","copy","$instance","this","closest","$output","querySelector","HTMLTextAreaElement","output","value","navigator","clipboard","writeText","message","opts","options","$toast","classList","add","createToast","innerText","keyFrom","opacity","matchMedia","matches","transform","append","animate","fill","Promise","resolve","reject","window","setTimeout","keyTo","addEventListener","remove","queueDestroyToast","toast","readTypeDef","typedef","lineCommentPattern","blockCommentPattern","lines","split","map","line","trim","filter","test","length","Error","nameMatch","match","exported","Boolean","name","extendedInterface","props","slice","lineNumber","lineMatch","propName","isOptional","el","typeDef","writeTypeguardName","typeName","writeTypeguardExpression","propType","indent","indentLevel","baseIndent","level","indentLevels","Array","join","writeIndentation","customTypePattern","includes","isValue","arrayMatch","innerType","passErrorLogger","unionMembers","dedupedUnionMembers","Set","console","warn","type","setAttribute","body","version","writeTypeAssertionName","isIndentation","enumToCheck","values","Object","TABS","SPACE_TWO","SPACE_FOUR","isEnum","getOptions","$allowEnhancedDebugging","HTMLInputElement","allowEnhancedDebugging","checked","$indentation","HTMLSelectElement","indentation","generate","$input","input","typedefArg","writeTypeAssertionFunction","typeDefArg","writeTypeguardFunction","e","String","persistOptions","localStorage","setItem","JSON","stringify","querySelectorAll","forEach","key","ctrlKey","metaKey","call","contains"],"sourceRoot":""}